generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                  String        @id @default(uuid())
  email               String        @unique
  nome                String
  telefone            String?
  senhaHash           String        @map("senha_hash")
  cargo               Cargo         @default(GUARDA_VIDAS)
  perfilGuardaVidas   GuardaVidas?
  dataCriacao         DateTime      @default(now()) @map("data_criacao")
  dataAtualizacao     DateTime      @updatedAt @map("data_atualizacao")
  @@map("usuarios")
}

model GuardaVidas {
  id                  String                @id @default(uuid())
  dataAdmissao        DateTime              @map("data_admissao")
  diasDeFolga         String[]              @map("dias_de_folga")
  estatisticas        Json?
  usuarioId           String                @unique @map("usuario_id")
  usuario             Usuario               @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  preferenciasPostos  PreferenciaPosto[]
  diasIndisponiveis   DiaIndisponivel[]
  alocacoes           AlocacaoDiaria[]
  solicitacoes        Solicitacao[]
  @@map("guarda_vidas")
}

model Posto {
  id               String                @id @default(uuid())
  nome             String                @unique
  numero           Int
  alocacaoMaxima   Int                   @map("alocacao_maxima")
  localizacao      String?
  movimento        Int
  diasFechados     String[]             @map("dias_fechados")
  datasFechadas    DataFechadaPosto[]
  preferencias     PreferenciaPosto[]
  alocacoes        AlocacaoDiaria[]
  @@map("postos")
}

model DataFechadaPosto {
  id        String    @id @default(uuid())
  data      DateTime  @db.Date
  motivo    String?
  postoId   String    @map("posto_id")
  posto     Posto     @relation(fields: [postoId], references: [id], onDelete: Cascade)

  @@map("datas_fechadas_posto")
}

model AlocacaoDiaria {
  id              String        @id @default(uuid())
  data            DateTime      @db.Date
  guardaVidasId   String        @map("guarda_vidas_id")
  guardaVidas     GuardaVidas   @relation(fields: [guardaVidasId], references: [id], onDelete: Cascade)
  postoId         String        @map("posto_id")
  posto           Posto         @relation(fields: [postoId], references: [id], onDelete: Cascade)
  @@unique([data, guardaVidasId], map: "alocacao_diaria_data_guarda_vidas_id_key")
  @@map("alocacoes_diarias")
}

model PreferenciaPosto {
  id              String        @id @default(uuid())
  prioridade      Int
  justificativa   String?
  postoId         String        @map("posto_id")
  posto           Posto         @relation(fields: [postoId], references: [id], onDelete: Cascade)
  guardaVidasId   String        @map("guarda_vidas_id")
  guardaVidas     GuardaVidas   @relation(fields: [guardaVidasId], references: [id], onDelete: Cascade)
  @@map("preferencias_posto")
}

model DiaIndisponivel {
  id              String        @id @default(uuid())
  data            DateTime      @db.Date
  motivo          String?
  guardaVidasId   String        @map("guarda_vidas_id")
  guardaVidas     GuardaVidas   @relation(fields: [guardaVidasId], references: [id], onDelete: Cascade)
  @@map("dias_indisponiveis")
}

model Solicitacao {
  id                  String              @id @default(uuid())
  tipo                TipoSolicitacao     @map("tipo")
  dataOriginal        DateTime?           @db.Date @map("data_original")
  postoOriginal       String?             @map("posto_original")
  dataSolicitada      DateTime?           @db.Date @map("data_solicitada")
  postoSolicitado     String?             @map("posto_solicitado")
  motivo              String?
  status              StatusSolicitacao   @default(PENDENTE)
  dataCriacao         DateTime            @default(now()) @map("data_criacao")
  dataAtualizacao     DateTime            @updatedAt @map("data_atualizacao")
  guardaVidasId       String              @map("guarda_vidas_id")
  guardaVidas         GuardaVidas         @relation(fields: [guardaVidasId], references: [id], onDelete: Cascade)
  @@map("solicitacoes")
}

enum Cargo {
  GUARDA_VIDAS
  COMANDANTE
}

enum DiaDaSemana {
  segunda
  terca_feira
  quarta_feira
  quinta_feira
  sexta_feira
  sabado
  domingo
}

enum TipoSolicitacao {
  PREFERENCIA_POSTO
  DIA_INDISPONIVEL
  @@map("tipo_solicitacao")
}

enum StatusSolicitacao {
  PENDENTE
  APROVADA
  REJEITADA
  @@map("status_solicitacao")
}