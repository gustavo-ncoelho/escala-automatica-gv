generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model usuario {
  id         String         @id @default(uuid())
  email      String         @unique
  nome       String
  telefone   String?
  senha_hash String
  cargo      Cargo          @default(GUARDA_VIDAS)
  perfil_guarda_vidas guarda_vidas?
  data_criacao     DateTime @default(now())
  data_atualizacao DateTime @updatedAt
}

model guarda_vidas {
  id                          String                @id @default(uuid())
  dataAdmissao                DateTime
  diasDeFolga                 String[]
  estatisticas                Json?
  usuario_id                  String                @unique
  usuario                     usuario               @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  preferenciasPostos          preferencia_posto[]
  diasIndisponiveis           dia_indisponivel[]
  alocacoes                   alocacao_diaria[]
  solicitacoes                solicitacao[]
}


model posto {
  id              String                @id @default(uuid())
  nome            String                @unique
  numero          Int
  alocacaoMaxima  Int
  localizacao     String?
  preferencias    preferencia_posto[]
  alocacoes       alocacao_diaria[]
}

model alocacao_diaria {
  id             String        @id @default(uuid())
  data           DateTime      @db.Date
  guarda_vidas_id String
  guarda_vidas   guarda_vidas  @relation(fields: [guarda_vidas_id], references: [id], onDelete: Cascade)
  posto_id       String
  posto          posto         @relation(fields: [posto_id], references: [id], onDelete: Cascade)
  @@unique([data, guarda_vidas_id])
}

model preferencia_posto {
  id              String        @id @default(uuid())
  prioridade      Int
  justificativa   String?
  posto_id        String
  posto           posto         @relation(fields: [posto_id], references: [id], onDelete: Cascade)
  guarda_vidas_id String
  guarda_vidas    guarda_vidas  @relation(fields: [guarda_vidas_id], references: [id], onDelete: Cascade)
}

model dia_indisponivel {
  id              String        @id @default(uuid())
  data            DateTime      @db.Date
  motivo          String?
  guarda_vidas_id String
  guarda_vidas    guarda_vidas  @relation(fields: [guarda_vidas_id], references: [id], onDelete: Cascade)
}


model solicitacao {
  id String                 @id @default(uuid())
  guarda_vidas_id String
  guarda_vidas guarda_vidas @relation(fields: [guarda_vidas_id], references: [id], onDelete: Cascade)
  tipo tipo_solicitacao
  data_original DateTime?   @db.Date
  posto_original Int?
  data_solicitada DateTime? @db.Date
  posto_solicitado Int?
  colega_nao_preferido Int?
  motivo String?
  status status_solicitacao @default(PENDENTE)
  data_criacao DateTime @default(now())
  data_atualizacao DateTime @updatedAt

}

enum Cargo {
  GUARDA_VIDAS
  COMANDANTE
}

enum DiaDaSemana {
  segunda
  terca_feira
  quarta_feira
  quinta_feira
  sexta_feira
  sabado
  domingo
}

enum tipo_solicitacao {
  PREFERENCIA_POSTO
  DIA_INDISPONIVEL
  TROCA_ESCALA
}

enum status_solicitacao {
  PENDENTE
  APROVADA
  REJEITADA
}